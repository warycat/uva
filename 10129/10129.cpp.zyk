#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <algorithm>
#include <assert.h>

using std::min;

char s[1001];
int a[27][27];
bool b[27];
int p[27];
int pn;
int id[27], od[27];
int us[27];

int find(int a)
{
	static int r[27];
	int v = 0;
	while (us[a] != a) r[v++] = a, a = us[a];
	for (int i = 0; i < v; i++) r[i] = a;
	return a;
}

void addedge(int u, int v, int w = 1)
{
	a[u][v] += w;
	od[u] += w;
	id[v] += w;
}

int uni(int a, int b)
{
	us[find(a)] = find(b);
}

int search(int v, int c)
{
	assert(id[v] == od[v]);
	p[pn++] = v;
	if (b[v]) {
		for (int i = --pn; p[i] != v || i == pn; i--) {
			uni(v, p[i]);
			addedge(p[i - 1], p[i], -c);
		}
		assert(id[v] == od[v]);
		return c;
	}
	b[v] = true;
	for (int i = 0; i < 27; i++)
		while (a[v][i])
			c -= search(i, min(c, a[v][i]));
	--pn;
	b[v] = false;
	assert(id[v] == od[v]);
}

#define arrclr(a) memset(a, 0, sizeof(a))

#define cntif(c) if (c) { \
	puts("The door cannot be opened."); goto endofwhile; }

int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		arrclr(a);
		arrclr(id);
		arrclr(od);
		for (int i = 0; i < 27; i++)
			us[i] = i;
		int n;
		scanf("%d\n", &n);
		for (int i = 0; i < n; i++) {
			gets(s);
			addedge(s[0] - 'a', s[strlen(s) - 1] - 'a');
		}
		bool odo = false, ido = false;
		for (int i = 0; i < 26; i++) {
			if (id[i] != od[i]) {
				if (id[i] + 1 == od[i]) {
					cntif(ido);
					ido = true;
					addedge(26, i);
				} else if (od[i] + 1 == id[i]) {
					cntif(odo);
					odo = true;
					addedge(i, 26);
				} else cntif(1);
			} else if (id[i] == 0) {
				uni(i, 26);
				//addedge(i, 26);
				//addedge(26, i);
			}
		}
		cntif(ido ^ odo);
		if (!ido) {
			for (int i = 0; i < 26; i++) {
				if (!a[i][26]) {
					addedge(i, 26);
					addedge(26, i);
					goto hello;
				}
			}
		}
		for (int i = 0; i < 27; i++)
			if (id[i] != od[i]) return 0;
	hello:
		search(26, INT_MAX);
		assert(pn == 0);
		int x;
		x = find(0);
		for (int i = 0; i < 27; i++)
			cntif(find(i) != x);
		puts("Ordering is possible.");
	endofwhile:;
	}
}
